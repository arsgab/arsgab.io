name: Build site and publish to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master", "main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  SITEDESC: ${{ vars.SITEDESC }}
  STATS_WEBSITE_ID: ${{ vars.STATS_WEBSITE_ID }}
  IMGPROXY_KEY: ${{ secrets.IMGPROXY_KEY }}
  IMGPROXY_SALT: ${{ secrets.IMGPROXY_SALT }}
  IMGPROXY_URL_SOURCE_FQDN: ${{ vars.IMGPROXY_URL_SOURCE_FQDN }}

jobs:
  build-and-publish:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Setup Python env
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-cached
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached Python dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: '.venv'
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Python dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Save Python env ref
        run: echo "VENV=$(poetry env info --path)" >> $GITHUB_ENV

      # Lint Python code
      - name: Lint code
        run: make lint

      # Setup Node env
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install Node requirements
        run: pnpm install

      # Build assets
      - name: Build static assets
        run: make static
      - name: Build site
        run: make html

      # Publish
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
